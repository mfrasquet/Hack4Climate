pragma solidity ^0.4.11;

contract OrirginS{
    string public ownerName;
    address public owner = msg.sender;
    uint256 public energyCommitment;
    uint256 fixPrice;
    uint256 public moneyCommited;
    address public beneficiary;
    uint public deadline;
    
    event LogValue(uint msgVvalue);
    modifier onlyOwner{
        if (msg.sender !=owner) throw;
        _;
    }
    
    function OriginS(uint256 iniCommitment,uint256 durationInMinutes, address beneficiary){
        //Function can be called more than once and reset companyCommitment!!
    energyCommitment=iniCommitment; //in terms of kWh
    ownerName="Apple";
    deadline = now + durationInMinutes * 1 minutes;
    //beneficiary=0xdd870fa1b7c4700f2bd7f44238821c26f7392148;
    } 
    
    //function to fund the smart contract
    function fund() payable {
    moneyCommited += msg.value;
    fixPrice=moneyCommited/energyCommitment;
    }
    
    //Simple function to withdraw value representing the kwh
    function withdraw (uint256 value) onlyOwner{
    if (energyCommitment-value<= 0) {
    energyCommitment=0;
    msg.sender.transfer(energyCommitment*fixPrice);
    moneyCommited-=energyCommitment*fixPrice;
    //send some kWh back
    }
    energyCommitment-=value;
    moneyCommited-=value*fixPrice;
    msg.sender.transfer(value*fixPrice); 
    }
   
   //simple function to let the beneficiary withdraw the money 
   function benefWithdraw(){
   require(now > deadline);
   require(msg.sender == beneficiary);
   beneficiary = address(0); //Just to be sure he can only withdraw once.
   //send the funds
   msg.sender.transfer(moneyCommited);
   moneyCommited=0;
}
    
}

